{"version":3,"file":"static/webpack/static/development/pages/index.js.f2a8a045e3bd09cd5b1e.hot-update.js","sources":["webpack:///./src/pages/index/index.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { withRedux } from \"../../lib/redux\";\nimport { Row, Col } from \"antd\";\nimport ReactEcharts from \"echarts-for-react\";\nimport \"../../../public/js/china\";\nconst option = {\n  title: {\n    text: \"iphone销量\",\n    subtext: \"纯属虚构\",\n    left: \"center\"\n  },\n  tooltip: {\n    trigger: \"item\"\n  },\n  legend: {\n    orient: \"vertical\",\n    left: \"left\",\n    data: [\"iphone3\", \"iphone4\", \"iphone5\"]\n  },\n  visualMap: {\n    min: 0,\n    max: 2500,\n    left: \"left\",\n    top: \"bottom\",\n    text: [\"高\", \"低\"], // 文本，默认为数值文本\n    calculable: true\n  },\n  toolbox: {\n    show: true,\n    orient: \"vertical\",\n    left: \"right\",\n    top: \"center\",\n    feature: {\n      mark: { show: true },\n      dataView: { show: true, readOnly: false },\n      restore: { show: true },\n      saveAsImage: { show: true }\n    }\n  },\n  series: [\n    {\n      name: \"iphone3\",\n      type: \"map\",\n      mapType: \"china\",\n      roam: false,\n      label: {\n        normal: {\n          show: false\n        },\n        emphasis: {\n          show: true\n        }\n      },\n      data: [\n        { name: \"北京1\", value: Math.round(Math.random() * 1000) },\n        { name: \"天津\", value: Math.round(Math.random() * 1000) },\n        { name: \"上海\", value: Math.round(Math.random() * 1000) },\n        { name: \"重庆\", value: Math.round(Math.random() * 1000) },\n        { name: \"河北\", value: Math.round(Math.random() * 1000) },\n        { name: \"河南\", value: Math.round(Math.random() * 1000) },\n        { name: \"云南\", value: Math.round(Math.random() * 1000) },\n        { name: \"辽宁\", value: Math.round(Math.random() * 1000) },\n        { name: \"黑龙江\", value: Math.round(Math.random() * 1000) },\n        { name: \"湖南\", value: Math.round(Math.random() * 1000) },\n        { name: \"安徽\", value: Math.round(Math.random() * 1000) },\n        { name: \"山东\", value: Math.round(Math.random() * 1000) },\n        { name: \"新疆\", value: Math.round(Math.random() * 1000) },\n        { name: \"江苏\", value: Math.round(Math.random() * 1000) },\n        { name: \"浙江\", value: Math.round(Math.random() * 1000) },\n        { name: \"江西\", value: Math.round(Math.random() * 1000) },\n        { name: \"湖北\", value: Math.round(Math.random() * 1000) },\n        { name: \"广西\", value: Math.round(Math.random() * 1000) },\n        { name: \"甘肃\", value: Math.round(Math.random() * 1000) },\n        { name: \"山西\", value: Math.round(Math.random() * 1000) },\n        { name: \"内蒙古\", value: Math.round(Math.random() * 1000) },\n        { name: \"陕西\", value: Math.round(Math.random() * 1000) },\n        { name: \"吉林\", value: Math.round(Math.random() * 1000) },\n        { name: \"福建\", value: Math.round(Math.random() * 1000) },\n        { name: \"贵州\", value: Math.round(Math.random() * 1000) },\n        { name: \"广东\", value: Math.round(Math.random() * 1000) },\n        { name: \"青海\", value: Math.round(Math.random() * 1000) },\n        { name: \"西藏\", value: Math.round(Math.random() * 1000) },\n        { name: \"四川\", value: Math.round(Math.random() * 1000) },\n        { name: \"宁夏\", value: Math.round(Math.random() * 1000) },\n        { name: \"海南\", value: Math.round(Math.random() * 1000) },\n        { name: \"台湾\", value: Math.round(Math.random() * 1000) },\n        { name: \"香港\", value: Math.round(Math.random() * 1000) },\n        { name: \"澳门\", value: Math.round(Math.random() * 1000) }\n      ]\n    },\n    {\n      name: \"iphone4\",\n      type: \"map\",\n      mapType: \"china\",\n      label: {\n        normal: {\n          show: false\n        },\n        emphasis: {\n          show: true\n        }\n      },\n      data: [\n        { name: \"北京\", value: Math.round(Math.random() * 1000) },\n        { name: \"天津\", value: Math.round(Math.random() * 1000) },\n        { name: \"上海\", value: Math.round(Math.random() * 1000) },\n        { name: \"重庆\", value: Math.round(Math.random() * 1000) },\n        { name: \"河北\", value: Math.round(Math.random() * 1000) },\n        { name: \"安徽\", value: Math.round(Math.random() * 1000) },\n        { name: \"新疆\", value: Math.round(Math.random() * 1000) },\n        { name: \"浙江\", value: Math.round(Math.random() * 1000) },\n        { name: \"江西\", value: Math.round(Math.random() * 1000) },\n        { name: \"山西\", value: Math.round(Math.random() * 1000) },\n        { name: \"内蒙古\", value: Math.round(Math.random() * 1000) },\n        { name: \"吉林\", value: Math.round(Math.random() * 1000) },\n        { name: \"福建\", value: Math.round(Math.random() * 1000) },\n        { name: \"广东\", value: Math.round(Math.random() * 1000) },\n        { name: \"西藏\", value: Math.round(Math.random() * 1000) },\n        { name: \"四川\", value: Math.round(Math.random() * 1000) },\n        { name: \"宁夏\", value: Math.round(Math.random() * 1000) },\n        { name: \"香港\", value: Math.round(Math.random() * 1000) },\n        { name: \"澳门\", value: Math.round(Math.random() * 1000) }\n      ]\n    },\n    {\n      name: \"iphone5\",\n      type: \"map\",\n      mapType: \"china\",\n      label: {\n        normal: {\n          show: false\n        },\n        emphasis: {\n          show: true\n        }\n      },\n      data: [\n        { name: \"北京\", value: Math.round(Math.random() * 1000) },\n        { name: \"天津\", value: Math.round(Math.random() * 1000) },\n        { name: \"上海\", value: Math.round(Math.random() * 1000) },\n        { name: \"广东\", value: Math.round(Math.random() * 1000) },\n        { name: \"台湾\", value: Math.round(Math.random() * 1000) },\n        { name: \"香港\", value: Math.round(Math.random() * 1000) },\n        { name: \"澳门\", value: Math.round(Math.random() * 1000) }\n      ]\n    }\n  ]\n};\n\nconst HomePage = props => {\n  useEffect(() => {\n    const firstGet = async () => {\n      userInfo();\n    };\n    firstGet();\n    return componentWillUnmount;\n  }, []);\n  function componentWillUnmount() {\n    // 组件销毁时你要执行的代码\n    console.log(\"组件销毁？\");\n  }\n  function userInfo() {\n    console.log(\"组件完成\");\n  }\n\n  return (\n    <div>\n      <Row>\n        <Col span={24}>\n          <ReactEcharts option={option}></ReactEcharts>\n        </Col>\n      </Row>\n    </div>\n  );\n};\nconst timeout = (ms, result) => {\n  return new Promise(resolve => setTimeout(() => resolve(result), ms));\n};\nHomePage.getInitialProps = async ({ reduxStore }) => {\n  // Tick the time once, so we'll have a\n  // valid time before first render\n\n  // const { dispatch } = reduxStore;\n  // dispatch({\n  //   name: \"得到的\"\n  // });\n  // const res = await timeout(2200, { userName: \"Morgan\" });\n  // console.log(res);\n  return {\n    userName: \"res.userName\",\n    keywords: \"test-key\",\n    description: \"test-description\",\n    title: \"stone-epidemic\"\n  };\n};\n\nexport default withRedux(HomePage);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AANA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAJA;AALA;AAYA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AAQA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AA/CA;AAmDA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AAQA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AA/BA;AAmCA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AADA;AAJA;AAQA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAnBA;AAvHA;AACA;AA+IA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AAJA;AACA;AAXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAiBA;;;;A","sourceRoot":""}